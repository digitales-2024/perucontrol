using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using PeruControl.Domain.Entities;

namespace PeruControl.Infrastructure.Configurations;

public class ClientConfiguration : IEntityTypeConfiguration<Client>
{
    public void Configure(EntityTypeBuilder<Client> builder)
    {
        // Table configuration
        builder.ToTable("DomainClients");
        builder.HasKey(c => c.Id);

        // Base entity properties
        builder.Property(c => c.Id).HasColumnName("Id").IsRequired();

        builder.Property(c => c.IsActive).HasColumnName("IsActive").HasDefaultValue(true);

        builder.Property(c => c.CreatedAt).HasColumnName("CreatedAt").HasDefaultValueSql("NOW()");

        builder.Property(c => c.ModifiedAt).HasColumnName("ModifiedAt").HasDefaultValueSql("NOW()");

        // ClientNumber - map to private field, auto-generated by database
        builder
            .Property("_clientNumber")
            .HasColumnName("ClientNumber")
            .ValueGeneratedOnAdd()
            .IsRequired();

        // DocumentInfo value object
        builder.OwnsOne(
            c => c.DocumentInfo,
            documentInfo =>
            {
                documentInfo
                    .Property(di => di.Type)
                    .HasColumnName("TypeDocument")
                    .HasMaxLength(3)
                    .IsRequired();

                documentInfo
                    .Property(di => di.Value)
                    .HasColumnName("TypeDocumentValue")
                    .HasMaxLength(11)
                    .IsRequired();

                // Create the index on the owned type's property
                documentInfo
                    .HasIndex(di => di.Value)
                    .IsUnique()
                    .HasDatabaseName("IX_DomainClients_TypeDocumentValue");
            }
        );

        // Email value object
        builder.OwnsOne(
            c => c.Email,
            email =>
            {
                email.Property(e => e.Value).HasColumnName("Email").HasMaxLength(50).IsRequired();
            }
        );

        // PhoneNumber value object
        builder.OwnsOne(
            c => c.PhoneNumber,
            phone =>
            {
                phone
                    .Property(p => p.Value)
                    .HasColumnName("PhoneNumber")
                    .HasMaxLength(24)
                    .IsRequired();
            }
        );

        // FiscalAddress value object
        builder.OwnsOne(
            c => c.FiscalAddress,
            address =>
            {
                address
                    .Property(a => a.Value)
                    .HasColumnName("FiscalAddress")
                    .HasMaxLength(250)
                    .IsRequired();
            }
        );

        // Simple properties
        builder.Property(c => c.Name).HasColumnName("Name").HasMaxLength(100).IsRequired();

        builder.Property(c => c.RazonSocial).HasColumnName("RazonSocial").HasMaxLength(150);

        builder.Property(c => c.BusinessType).HasColumnName("BusinessType").HasMaxLength(250);

        builder.Property(c => c.ContactName).HasColumnName("ContactName").HasMaxLength(100);

        // Configure the locations relationship
        builder
            .HasMany(c => c.Locations)
            .WithOne()
            .HasForeignKey("ClientId")
            .OnDelete(DeleteBehavior.Cascade);

        // Configure backing field for locations
        var locationsNavigation = builder.Metadata.FindNavigation(nameof(Client.Locations));
        if (locationsNavigation != null)
        {
            locationsNavigation.SetPropertyAccessMode(PropertyAccessMode.Field);
        }
    }
}
