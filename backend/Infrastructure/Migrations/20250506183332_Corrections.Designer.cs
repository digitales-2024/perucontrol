// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PeruControl.Infrastructure.Model;

#nullable disable

namespace PeruControl.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250506183332_Corrections")]
    partial class Corrections
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BankCCI")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Deductions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DigesaNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DirectorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Phones")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RUC")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.Certificate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("ProjectAppointmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectAppointmentId")
                        .IsUnique();

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BusinessType")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int>("ClientNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ClientNumber"));

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FiscalAddress")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<string>("RazonSocial")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("TypeDocument")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("TypeDocumentValue")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)");

                    b.HasKey("Id");

                    b.HasIndex("TypeDocumentValue")
                        .IsUnique();

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.ClientLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("ClientLocations");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActiveIngredient")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.ProductAmountSolvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AmountAndSolvent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAmountSolvent");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<string[]>("Ambients")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<long>("Area")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("MurinoMapKey")
                        .HasColumnType("text");

                    b.Property<string>("MurinoMapUrl")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProjectNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectNumber"));

                    b.Property<Guid?>("QuotationId")
                        .HasColumnType("uuid");

                    b.Property<long>("SpacesCount")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("QuotationId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.ProjectAppointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AppointmentNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AppointmentNumber"));

                    b.Property<bool>("Cancelled")
                        .HasColumnType("boolean");

                    b.Property<int?>("CertificateNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("EnterTime")
                        .HasColumnType("interval");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<TimeSpan?>("LeaveTime")
                        .HasColumnType("interval");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectAppointments");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.ProjectOperationSheet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AspercionMotor")
                        .HasColumnType("boolean");

                    b.Property<bool>("AspersionManual")
                        .HasColumnType("boolean");

                    b.Property<string>("ColocacionCebosCebaderos")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int?>("DegreeInsectInfectivity")
                        .HasColumnType("integer");

                    b.Property<int?>("DegreeRodentInfectivity")
                        .HasColumnType("integer");

                    b.Property<string>("Desinfectant")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DesinfectantAmount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Insecticide")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Insecticide2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InsecticideAmount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InsecticideAmount2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Insects")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("NebulizacionCaliente")
                        .HasColumnType("boolean");

                    b.Property<bool>("NebulizacionFrio")
                        .HasColumnType("boolean");

                    b.Property<string>("NroJaulasTomahawk")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NroPlanchasPegantes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumeroCeboRepuestos")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumeroCeboTotal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Observations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OtherPlagues")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OtherProducts")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OtherProductsAmount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectAppointmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Recommendations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RodentConsumptionDeteriorated")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RodentConsumptionNone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RodentConsumptionPartial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RodentConsumptionTotal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rodenticide")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RodenticideAmount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Rodents")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Staff1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Staff2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Staff3")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Staff4")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TreatedAreas")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProjectAppointmentId")
                        .IsUnique();

                    b.ToTable("ProjectOperationSheet");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.ProjectOrderNumber", b =>
                {
                    b.Property<int>("ProjectOrderNumberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectOrderNumberId"));

                    b.Property<int>("ProjectOrderNumberValue")
                        .HasColumnType("integer");

                    b.HasKey("ProjectOrderNumberId");

                    b.ToTable("ProjectOrderNumbers");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.Quotation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Availability")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Derodent")
                        .HasColumnType("text");

                    b.Property<string>("Desinsectant")
                        .HasColumnType("text");

                    b.Property<string>("Disinfectant")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<bool>("HasTaxes")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Others")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("QuotationNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuotationNumber"));

                    b.Property<string>("ServiceAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<string[]>("TermsAndConditions")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Quotations");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.QuotationService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Accesories")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("NameDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("QuotationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("QuotationId");

                    b.ToTable("QuotationServices");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.RodentArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CebaderoTrampa")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("Frequency")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductDose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RodentConsumption")
                        .HasColumnType("integer");

                    b.Property<int>("RodentMaterials")
                        .HasColumnType("integer");

                    b.Property<Guid>("RodentRegisterId")
                        .HasColumnType("uuid");

                    b.Property<int>("RodentResult")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RodentRegisterId");

                    b.ToTable("RodentAreas");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.RodentRegister", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyRepresentative")
                        .HasColumnType("text");

                    b.Property<string>("CorrectiveMeasures")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Incidents")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("ProjectAppointmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectAppointmentId")
                        .IsUnique();

                    b.ToTable("RodentRegisters");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.TermsAndConditions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("TermsAndConditions");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.TreatmentArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppliedTechnique")
                        .HasColumnType("text");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("InfestationLevel")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("ObservedVector")
                        .HasColumnType("text");

                    b.Property<string>("PerformedService")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectAppointmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectAppointmentId");

                    b.ToTable("TreatmentAreas");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.TreatmentProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AppliedService")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AppliedTechnique")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AppliedTime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("EquipmentUsed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("ProductConcentrationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectAppointmentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProductConcentrationId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProjectAppointmentId");

                    b.ToTable("TreatmentProducts");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ProjectAppointmentService", b =>
                {
                    b.Property<Guid>("AppointmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uuid");

                    b.HasKey("AppointmentsId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ProjectAppointmentService");
                });

            modelBuilder.Entity("ProjectService", b =>
                {
                    b.Property<Guid>("ProjectsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectsId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ProjectService");
                });

            modelBuilder.Entity("QuotationService", b =>
                {
                    b.Property<Guid>("QuotationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServicesId")
                        .HasColumnType("uuid");

                    b.HasKey("QuotationId", "ServicesId");

                    b.HasIndex("ServicesId");

                    b.ToTable("QuotationService");
                });

            modelBuilder.Entity("TreatmentAreaTreatmentProduct", b =>
                {
                    b.Property<Guid>("TreatmentAreasId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TreatmentProductsId")
                        .HasColumnType("uuid");

                    b.HasKey("TreatmentAreasId", "TreatmentProductsId");

                    b.HasIndex("TreatmentProductsId");

                    b.ToTable("TreatmentAreaTreatmentProduct");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeruControl.Infrastructure.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.Certificate", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.ProjectAppointment", "ProjectAppointment")
                        .WithOne("Certificate")
                        .HasForeignKey("PeruControl.Infrastructure.Model.Certificate", "ProjectAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectAppointment");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.ClientLocation", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.Client", "Client")
                        .WithMany("ClientLocations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.ProductAmountSolvent", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.Product", "Product")
                        .WithMany("ProductAmountSolvents")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.Project", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeruControl.Infrastructure.Model.Quotation", "Quotation")
                        .WithMany()
                        .HasForeignKey("QuotationId");

                    b.Navigation("Client");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.ProjectAppointment", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.Project", "Project")
                        .WithMany("Appointments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.ProjectOperationSheet", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.ProjectAppointment", "ProjectAppointment")
                        .WithOne("ProjectOperationSheet")
                        .HasForeignKey("PeruControl.Infrastructure.Model.ProjectOperationSheet", "ProjectAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectAppointment");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.Quotation", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.Client", "Client")
                        .WithMany("ClientToQuotations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.QuotationService", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.Quotation", "Quotation")
                        .WithMany("QuotationServices")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.RodentArea", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.RodentRegister", "RodentRegister")
                        .WithMany("RodentAreas")
                        .HasForeignKey("RodentRegisterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RodentRegister");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.RodentRegister", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.ProjectAppointment", "ProjectAppointment")
                        .WithOne("RodentRegister")
                        .HasForeignKey("PeruControl.Infrastructure.Model.RodentRegister", "ProjectAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectAppointment");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.TreatmentArea", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.ProjectAppointment", "ProjectAppointment")
                        .WithMany("TreatmentAreas")
                        .HasForeignKey("ProjectAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectAppointment");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.TreatmentProduct", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.ProductAmountSolvent", "ProductConcentration")
                        .WithMany()
                        .HasForeignKey("ProductConcentrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeruControl.Infrastructure.Model.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeruControl.Infrastructure.Model.ProjectAppointment", "ProjectAppointment")
                        .WithMany("TreatmentProducts")
                        .HasForeignKey("ProjectAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductConcentration");

                    b.Navigation("ProjectAppointment");
                });

            modelBuilder.Entity("ProjectAppointmentService", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.ProjectAppointment", null)
                        .WithMany()
                        .HasForeignKey("AppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeruControl.Infrastructure.Model.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectService", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeruControl.Infrastructure.Model.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuotationService", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.Quotation", null)
                        .WithMany()
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeruControl.Infrastructure.Model.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TreatmentAreaTreatmentProduct", b =>
                {
                    b.HasOne("PeruControl.Infrastructure.Model.TreatmentArea", null)
                        .WithMany()
                        .HasForeignKey("TreatmentAreasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PeruControl.Infrastructure.Model.TreatmentProduct", null)
                        .WithMany()
                        .HasForeignKey("TreatmentProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.Client", b =>
                {
                    b.Navigation("ClientLocations");

                    b.Navigation("ClientToQuotations");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.Product", b =>
                {
                    b.Navigation("ProductAmountSolvents");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.Project", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.ProjectAppointment", b =>
                {
                    b.Navigation("Certificate")
                        .IsRequired();

                    b.Navigation("ProjectOperationSheet")
                        .IsRequired();

                    b.Navigation("RodentRegister")
                        .IsRequired();

                    b.Navigation("TreatmentAreas");

                    b.Navigation("TreatmentProducts");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.Quotation", b =>
                {
                    b.Navigation("QuotationServices");
                });

            modelBuilder.Entity("PeruControl.Infrastructure.Model.RodentRegister", b =>
                {
                    b.Navigation("RodentAreas");
                });
#pragma warning restore 612, 618
        }
    }
}
