// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "@hey-api/client-next";
import type { PostApiAuthLoginData, PostApiAuthLoginResponse, PostApiAuthLoginError, GetApiClientData, GetApiClientResponse, PostApiClientData, PostApiClientResponse, PostApiClientError, DeleteApiClientByIdData, DeleteApiClientByIdResponse, DeleteApiClientByIdError, GetApiClientByIdData, GetApiClientByIdResponse, GetApiClientByIdError, PatchApiClientByIdData, PatchApiClientByIdResponse, PatchApiClientByIdError, PatchApiClientByIdReactivateData, PatchApiClientByIdReactivateResponse, PatchApiClientByIdReactivateError, GetApiTermsAndConditionsData, GetApiTermsAndConditionsResponse, PostApiTermsAndConditionsData, PostApiTermsAndConditionsResponse, PostApiTermsAndConditionsError, DeleteApiTermsAndConditionsByIdData, DeleteApiTermsAndConditionsByIdResponse, DeleteApiTermsAndConditionsByIdError, GetApiTermsAndConditionsByIdData, GetApiTermsAndConditionsByIdResponse, GetApiTermsAndConditionsByIdError, PatchApiTermsAndConditionsByIdData, PatchApiTermsAndConditionsByIdResponse, PatchApiTermsAndConditionsByIdError, PatchApiTermsAndConditionsByIdReactivateData, PatchApiTermsAndConditionsByIdReactivateResponse, PatchApiTermsAndConditionsByIdReactivateError } from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const postApiAuthLogin = <ThrowOnError extends boolean = false>(options: Options<PostApiAuthLoginData, ThrowOnError>) => (options.client ?? _heyApiClient).post<PostApiAuthLoginResponse, PostApiAuthLoginError, ThrowOnError>({
    url: "/api/Auth/login",
    ...options,
    headers: {
        "Content-Type": "application/json",
        ...options?.headers,
    },
});

/**
 * Get all
 */
export const getApiClient = <ThrowOnError extends boolean = false>(options?: Options<GetApiClientData, ThrowOnError>) => (options?.client ?? _heyApiClient).get<GetApiClientResponse, unknown, ThrowOnError>({
    url: "/api/Client",
    ...options,
});

/**
 * Create one
 */
export const postApiClient = <ThrowOnError extends boolean = false>(options: Options<PostApiClientData, ThrowOnError>) => (options.client ?? _heyApiClient).post<PostApiClientResponse, PostApiClientError, ThrowOnError>({
    url: "/api/Client",
    ...options,
    headers: {
        "Content-Type": "application/json",
        ...options?.headers,
    },
});

/**
 * Deactivate by id
 */
export const deleteApiClientById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiClientByIdData, ThrowOnError>) => (options.client ?? _heyApiClient).delete<DeleteApiClientByIdResponse, DeleteApiClientByIdError, ThrowOnError>({
    url: "/api/Client/{id}",
    ...options,
});

/**
 * Get one by ID
 */
export const getApiClientById = <ThrowOnError extends boolean = false>(options: Options<GetApiClientByIdData, ThrowOnError>) => (options.client ?? _heyApiClient).get<GetApiClientByIdResponse, GetApiClientByIdError, ThrowOnError>({
    url: "/api/Client/{id}",
    ...options,
});

/**
 * Partial edit one by id
 */
export const patchApiClientById = <ThrowOnError extends boolean = false>(options: Options<PatchApiClientByIdData, ThrowOnError>) => (options.client ?? _heyApiClient).patch<PatchApiClientByIdResponse, PatchApiClientByIdError, ThrowOnError>({
    url: "/api/Client/{id}",
    ...options,
    headers: {
        "Content-Type": "application/json",
        ...options?.headers,
    },
});

/**
 * Reactivate by id
 */
export const patchApiClientByIdReactivate = <ThrowOnError extends boolean = false>(options: Options<PatchApiClientByIdReactivateData, ThrowOnError>) => (options.client ?? _heyApiClient).patch<PatchApiClientByIdReactivateResponse, PatchApiClientByIdReactivateError, ThrowOnError>({
    url: "/api/Client/{id}/reactivate",
    ...options,
});

/**
 * Get all
 */
export const getApiTermsAndConditions = <ThrowOnError extends boolean = false>(options?: Options<GetApiTermsAndConditionsData, ThrowOnError>) => (options?.client ?? _heyApiClient).get<GetApiTermsAndConditionsResponse, unknown, ThrowOnError>({
    url: "/api/TermsAndConditions",
    ...options,
});

/**
 * Create one
 */
export const postApiTermsAndConditions = <ThrowOnError extends boolean = false>(options: Options<PostApiTermsAndConditionsData, ThrowOnError>) => (options.client ?? _heyApiClient).post<PostApiTermsAndConditionsResponse, PostApiTermsAndConditionsError, ThrowOnError>({
    url: "/api/TermsAndConditions",
    ...options,
    headers: {
        "Content-Type": "application/json",
        ...options?.headers,
    },
});

/**
 * Deactivate by id
 */
export const deleteApiTermsAndConditionsById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiTermsAndConditionsByIdData, ThrowOnError>) => (options.client ?? _heyApiClient).delete<DeleteApiTermsAndConditionsByIdResponse, DeleteApiTermsAndConditionsByIdError, ThrowOnError>({
    url: "/api/TermsAndConditions/{id}",
    ...options,
});

/**
 * Get one by ID
 */
export const getApiTermsAndConditionsById = <ThrowOnError extends boolean = false>(options: Options<GetApiTermsAndConditionsByIdData, ThrowOnError>) => (options.client ?? _heyApiClient).get<GetApiTermsAndConditionsByIdResponse, GetApiTermsAndConditionsByIdError, ThrowOnError>({
    url: "/api/TermsAndConditions/{id}",
    ...options,
});

/**
 * Partial edit one by id
 */
export const patchApiTermsAndConditionsById = <ThrowOnError extends boolean = false>(options: Options<PatchApiTermsAndConditionsByIdData, ThrowOnError>) => (options.client ?? _heyApiClient).patch<PatchApiTermsAndConditionsByIdResponse, PatchApiTermsAndConditionsByIdError, ThrowOnError>({
    url: "/api/TermsAndConditions/{id}",
    ...options,
    headers: {
        "Content-Type": "application/json",
        ...options?.headers,
    },
});

/**
 * Reactivate by id
 */
export const patchApiTermsAndConditionsByIdReactivate = <ThrowOnError extends boolean = false>(options: Options<PatchApiTermsAndConditionsByIdReactivateData, ThrowOnError>) => (options.client ?? _heyApiClient).patch<PatchApiTermsAndConditionsByIdReactivateResponse, PatchApiTermsAndConditionsByIdReactivateError, ThrowOnError>({
    url: "/api/TermsAndConditions/{id}/reactivate",
    ...options,
});
