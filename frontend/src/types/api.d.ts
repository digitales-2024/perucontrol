/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/Stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get statistics for dashboard */
        get: {
            parameters: {
                query?: {
                    start?: string;
                    end?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["StatsGet"];
                        "application/json": components["schemas"]["StatsGet"];
                        "text/json": components["schemas"]["StatsGet"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get by time range */
        get: {
            parameters: {
                query?: {
                    start?: string;
                    end?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AppointmentGetDTO"][];
                        "application/json": components["schemas"]["AppointmentGetDTO"][];
                        "text/json": components["schemas"]["AppointmentGetDTO"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AppointmentGetOutDTO"];
                        "application/json": components["schemas"]["AppointmentGetOutDTO"];
                        "text/json": components["schemas"]["AppointmentGetOutDTO"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all appointments */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AppointmentGetDTO2"][];
                        "application/json": components["schemas"]["AppointmentGetDTO2"][];
                        "text/json": components["schemas"]["AppointmentGetDTO2"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/{id}/rodents/excel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Rodents Excel
         * @description Generates the Rodents Template in Ods format for an Appointment. The id parameter is the Appointment ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileResult"];
                        "application/json": components["schemas"]["FileResult"];
                        "text/json": components["schemas"]["FileResult"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/{id}/rodents/pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Rodents PDF
         * @description Generates the Rodents Template in PDF format for an Appointment. The id parameter is the Appointment ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileResult"];
                        "application/json": components["schemas"]["FileResult"];
                        "text/json": components["schemas"]["FileResult"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/{id}/rodents/email-pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Rodents PDF via Email */
        post: {
            parameters: {
                query: {
                    email: string;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/{id}/rodents/whatsapp-pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Rodents PDF via WhatsApp */
        post: {
            parameters: {
                query: {
                    phoneNumber: string;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/{appointmentId}/rodent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Rodent Register
         * @description Updates the Rodent Register for a specific appointment. The appointmentId parameter is the ID of the appointment.
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RodentRegisterUpdateDTO"];
                    "text/json": components["schemas"]["RodentRegisterUpdateDTO"];
                    "application/*+json": components["schemas"]["RodentRegisterUpdateDTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Appointment/{appointmentid}/rodent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Rodent of an appointment */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["RodentRegister"];
                        "application/json": components["schemas"]["RodentRegister"];
                        "text/json": components["schemas"]["RodentRegister"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/{id}/upload-murino-map": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Upload Murino Map
         * @description Allows uploading the Murino Map (PNG or PDF)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/x-www-form-urlencoded": {
                        ContentType?: string;
                        ContentDisposition?: string;
                        Headers?: {
                            [key: string]: string[];
                        };
                        /** Format: int64 */
                        Length?: number;
                        Name?: string;
                        FileName?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/{id}/murino-map": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get murino map file */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileResult"];
                        "application/json": components["schemas"]["FileResult"];
                        "text/json": components["schemas"]["FileResult"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/mail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/{id}/duplicate-from-previous": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Duplicate data from previous appointment
         * @description Duplicates all data from the previous appointment in the same project to the current appointment. This includes operation sheets, rodent registers, certificates, treatment data, and reports.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                    "text/json": components["schemas"]["LoginRequest"];
                    "application/*+json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["LoginResponse"];
                        "application/json": components["schemas"]["LoginResponse"];
                        "text/json": components["schemas"]["LoginResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                        "application/json": string;
                        "text/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RefreshRequest"];
                    "text/json": components["schemas"]["RefreshRequest"];
                    "application/*+json": components["schemas"]["RefreshRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["LoginResponse"];
                        "application/json": components["schemas"]["LoginResponse"];
                        "text/json": components["schemas"]["LoginResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                        "application/json": string;
                        "text/json": string;
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Business/upload-image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload system images */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/x-www-form-urlencoded": {
                        name?: string;
                    } & {
                        ContentType?: string;
                        ContentDisposition?: string;
                        Headers?: {
                            [key: string]: string[];
                        };
                        /** Format: int64 */
                        Length?: number;
                        Name?: string;
                        FileName?: string;
                    };
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Business/image/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get system image by name */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    name: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Business/image/{key}/{bucketName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get public R2 file */
        get: {
            parameters: {
                query?: {
                    expectedMime?: string;
                };
                header?: never;
                path: {
                    key: string;
                    bucketName: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Business": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Business"][];
                        "application/json": components["schemas"]["Business"][];
                        "text/json": components["schemas"]["Business"][];
                    };
                };
            };
        };
        put?: never;
        /** Create */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BusinessCreateDTO"];
                    "text/json": components["schemas"]["BusinessCreateDTO"];
                    "application/*+json": components["schemas"]["BusinessCreateDTO"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Business"];
                        "application/json": components["schemas"]["Business"];
                        "text/json": components["schemas"]["Business"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Business/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Business"];
                        "application/json": components["schemas"]["Business"];
                        "text/json": components["schemas"]["Business"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Deactivate by id */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Partial edit one by id */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["BusinessPatchDTO"];
                    "text/json": components["schemas"]["BusinessPatchDTO"];
                    "application/*+json": components["schemas"]["BusinessPatchDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Business/{id}/reactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivate by id */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Certificate/for-table": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Certificates for table
         * @description This endpoint returns a list of Certificates, sorted by most recent, and only ones with status != Created
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["GetCertificateForTableOutDto"][];
                        "application/json": components["schemas"]["GetCertificateForTableOutDto"][];
                        "text/json": components["schemas"]["GetCertificateForTableOutDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Certificate/for-creation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Certificates for creation
         * @description Returns a list of certificates and their appointments for creation, where the certificate has status == Created
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["GetCertificateForCreationOutDto"][];
                        "application/json": components["schemas"]["GetCertificateForCreationOutDto"][];
                        "text/json": components["schemas"]["GetCertificateForCreationOutDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Certificate/{certificateId}/mark-started": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Mark a Certificate as 'Started'
         * @description Marks the selected certificate as 'Started', thus showing it in its table UI
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    certificateId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/Certificate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all certificates */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["CertificateGet"][];
                        "application/json": components["schemas"]["CertificateGet"][];
                        "text/json": components["schemas"]["CertificateGet"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/{appointmentId}/Certificate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Certificate by appointment ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Certificate"];
                        "application/json": components["schemas"]["Certificate"];
                        "text/json": components["schemas"]["Certificate"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Certificate/{certificateId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update a certificate */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    certificateId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AppointmentCertificatePatchDTO"];
                    "text/json": components["schemas"]["AppointmentCertificatePatchDTO"];
                    "application/*+json": components["schemas"]["AppointmentCertificatePatchDTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Certificate"];
                        "application/json": components["schemas"]["Certificate"];
                        "text/json": components["schemas"]["Certificate"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Certificate/{certificateId}/word": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate Certificate Word */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    certificateId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileContentResult"];
                        "application/json": components["schemas"]["FileContentResult"];
                        "text/json": components["schemas"]["FileContentResult"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Certificate/{certificateId}/pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Certificate PDF
         * @description Generates the Certificate in PDF format for an Appointment. The appointmentId parameter is the Appointment ID.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    certificateId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileResult"];
                        "application/json": components["schemas"]["FileResult"];
                        "text/json": components["schemas"]["FileResult"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Certificate/{certificateId}/email-pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Certificate PDF via Email */
        post: {
            parameters: {
                query: {
                    email: string;
                };
                header?: never;
                path: {
                    certificateId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Certificate/{certificateId}/whatsapp-pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Certificate PDF via WhatsApp */
        post: {
            parameters: {
                query: {
                    phoneNumber: string;
                };
                header?: never;
                path: {
                    certificateId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Client": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Client"][];
                        "application/json": components["schemas"]["Client"][];
                        "text/json": components["schemas"]["Client"][];
                    };
                };
            };
        };
        put?: never;
        /** Create */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ClientCreateDTO"];
                    "text/json": components["schemas"]["ClientCreateDTO"];
                    "application/*+json": components["schemas"]["ClientCreateDTO"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Client"];
                        "application/json": components["schemas"]["Client"];
                        "text/json": components["schemas"]["Client"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Client/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Client"];
                        "application/json": components["schemas"]["Client"];
                        "text/json": components["schemas"]["Client"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Partial edit one by id */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ClientPatchDTO"];
                    "text/json": components["schemas"]["ClientPatchDTO"];
                    "application/*+json": components["schemas"]["ClientPatchDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/update/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar cliente por ID */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ClientPatchDTO"];
                    "text/json": components["schemas"]["ClientPatchDTO"];
                    "application/*+json": components["schemas"]["ClientPatchDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/Client/search-by-ruc/{ruc}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get business data by RUC */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    ruc: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SunatQueryResponse"];
                        "application/json": components["schemas"]["SunatQueryResponse"];
                        "text/json": components["schemas"]["SunatQueryResponse"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Client/{id}/reactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactive client by Id */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Client/export/csv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export all clients to CSV with optional date range filtering
         * @description Export clients to CSV. Use startDate and endDate query parameters to filter by creation date. If startDate is not specified, exports from Unix epoch start (1970-01-01). If endDate is not specified, exports until current time.
         */
        get: {
            parameters: {
                query?: {
                    startDate?: string;
                    endDate?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileResult"];
                        "application/json": components["schemas"]["FileResult"];
                        "text/json": components["schemas"]["FileResult"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/OperationSheet/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProjectOperationSheet"];
                        "application/json": components["schemas"]["ProjectOperationSheet"];
                        "text/json": components["schemas"]["ProjectOperationSheet"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Deactivate by id */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Partial edit one by id */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OperationSheetPatchDTO"];
                    "text/json": components["schemas"]["OperationSheetPatchDTO"];
                    "application/*+json": components["schemas"]["OperationSheetPatchDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/OperationSheet/for-table": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Operation Sheets for table
         * @description This endpoint returns a list of Appointments, sorted by most recent, and only ones with status != Created
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["GetOperationSheetsForTableOutDto"][];
                        "application/json": components["schemas"]["GetOperationSheetsForTableOutDto"][];
                        "text/json": components["schemas"]["GetOperationSheetsForTableOutDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/OperationSheet/for-creation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Operation Sheets for creation
         * @description Returns a list of services and their appointments for creation, where the operation sheet has status == Created
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["GetOperationSheetsForCreationOutDto"][];
                        "application/json": components["schemas"]["GetOperationSheetsForCreationOutDto"][];
                        "text/json": components["schemas"]["GetOperationSheetsForCreationOutDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/OperationSheet/{operationSheetId}/mark-started": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Mark an Operation Sheet as 'Started'
         * @description Marks the selected operation sheet as 'Started', thus showing it in its table UI
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    operationSheetId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/OperationSheet/by-appointment/{appointmentid}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update an operation sheet by appointment id */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OperationSheetPatchDTO"];
                    "text/json": components["schemas"]["OperationSheetPatchDTO"];
                    "application/*+json": components["schemas"]["OperationSheetPatchDTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProjectOperationSheet"];
                        "application/json": components["schemas"]["ProjectOperationSheet"];
                        "text/json": components["schemas"]["ProjectOperationSheet"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/OperationSheet/by-project/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Find operation sheet by project ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    projectId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProjectOperationSheet"];
                        "application/json": components["schemas"]["ProjectOperationSheet"];
                        "text/json": components["schemas"]["ProjectOperationSheet"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/OperationSheet/{id}/excel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Generate Operations Sheet excel */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/OperationSheet/{id}/pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Generate Operations Sheet pdf */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/OperationSheet/{id}/email-pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Operations Sheet PDF via Email */
        post: {
            parameters: {
                query: {
                    email: string;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/OperationSheet/{id}/whatsapp-pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Operations Sheet PDF via WhatsApp */
        post: {
            parameters: {
                query: {
                    phoneNumber: string;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/OperationSheet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProjectOperationSheet"][];
                        "application/json": components["schemas"]["ProjectOperationSheet"][];
                        "text/json": components["schemas"]["ProjectOperationSheet"][];
                    };
                };
            };
        };
        put?: never;
        /** Create */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["OperationSheetCreateDTO"];
                    "text/json": components["schemas"]["OperationSheetCreateDTO"];
                    "application/*+json": components["schemas"]["OperationSheetCreateDTO"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProjectOperationSheet"];
                        "application/json": components["schemas"]["ProjectOperationSheet"];
                        "text/json": components["schemas"]["ProjectOperationSheet"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/OperationSheet/{id}/reactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivate by id */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Project": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProjectSummary"][];
                        "application/json": components["schemas"]["ProjectSummary"][];
                        "text/json": components["schemas"]["ProjectSummary"][];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        /** Create */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ProjectCreateDTO"];
                    "text/json": components["schemas"]["ProjectCreateDTO"];
                    "application/*+json": components["schemas"]["ProjectCreateDTO"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Project"];
                        "application/json": components["schemas"]["Project"];
                        "text/json": components["schemas"]["Project"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Project/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one by Id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Project"];
                        "application/json": components["schemas"]["Project"];
                        "text/json": components["schemas"]["Project"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Deactivate by id */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update project */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ProjectPatchDTO"];
                    "text/json": components["schemas"]["ProjectPatchDTO"];
                    "application/*+json": components["schemas"]["ProjectPatchDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Project/{id}/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one by Id v2 */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProjectSummarySingle"];
                        "application/json": components["schemas"]["ProjectSummarySingle"];
                        "text/json": components["schemas"]["ProjectSummarySingle"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Project/{id}/v3": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one by Id v3 */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProjectSummarySingle2"];
                        "application/json": components["schemas"]["ProjectSummarySingle2"];
                        "text/json": components["schemas"]["ProjectSummarySingle2"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Project/{id}/desactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Deactivate Project by id */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Project/{id}/appointment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Appointment
         * @description Creates and adds a new appointment to a project
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AppointmentCreateDTO"];
                    "text/json": components["schemas"]["AppointmentCreateDTO"];
                    "application/*+json": components["schemas"]["AppointmentCreateDTO"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Project"];
                        "application/json": components["schemas"]["Project"];
                        "text/json": components["schemas"]["Project"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ValidationProblemDetails"];
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                        "text/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Project/{proj_id}/appointment/{app_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Desactivate Appointment
         * @description Deactivates an appointment from a project
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    proj_id: string;
                    app_id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Project"];
                        "application/json": components["schemas"]["Project"];
                        "text/json": components["schemas"]["Project"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ValidationProblemDetails"];
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                        "text/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Edit Appointment
         * @description Edits an appointment from a project
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    proj_id: string;
                    app_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AppointmentPatchDTO"];
                    "text/json": components["schemas"]["AppointmentPatchDTO"];
                    "application/*+json": components["schemas"]["AppointmentPatchDTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Project"];
                        "application/json": components["schemas"]["Project"];
                        "text/json": components["schemas"]["Project"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ValidationProblemDetails"];
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                        "text/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Project/{proj_id}/cancel/{app_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Cancel or reactivate an Appointment */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    proj_id: string;
                    app_id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AppointmentCancelDTO"];
                    "text/json": components["schemas"]["AppointmentCancelDTO"];
                    "application/*+json": components["schemas"]["AppointmentCancelDTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ValidationProblemDetails"];
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                        "text/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Project/{id}/times": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update enterTime and leaveTime of a Appointment */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateAppointmentTimesDto"];
                    "text/json": components["schemas"]["UpdateAppointmentTimesDto"];
                    "application/*+json": components["schemas"]["UpdateAppointmentTimesDto"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/Project/{id}/schedule/excel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Schedule Excel
         * @description Generates the Schedule spreadsheet for a project.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileResult"];
                        "application/json": components["schemas"]["FileResult"];
                        "text/json": components["schemas"]["FileResult"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Project/{id}/schedule/pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Schedule PDF
         * @description Generates the Schedule spreadsheet for a project.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileResult"];
                        "application/json": components["schemas"]["FileResult"];
                        "text/json": components["schemas"]["FileResult"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Project/{id}/schedule2/excel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Schedule Format 2 excel
         * @description Generates the secons Schedule spreadsheet for a project.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileResult"];
                        "application/json": components["schemas"]["FileResult"];
                        "text/json": components["schemas"]["FileResult"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Project/{id}/schedule2/pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Schedule Format 2 PDF
         * @description Generates the secons Schedule spreadsheet for a project.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileResult"];
                        "application/json": components["schemas"]["FileResult"];
                        "text/json": components["schemas"]["FileResult"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Project/{id}/schedule/email-pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Schedule PDF via Email */
        post: {
            parameters: {
                query: {
                    email: string;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Project/{id}/schedule/whatsapp-pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Schedule PDF via WhatsApp */
        post: {
            parameters: {
                query: {
                    phoneNumber: string;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Project/export/csv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export all projects to CSV with optional date range filtering
         * @description Export projects to CSV. Use startDate and endDate query parameters to filter by creation date. If startDate is not specified, exports from Unix epoch start (1970-01-01). If endDate is not specified, exports until current time.
         */
        get: {
            parameters: {
                query?: {
                    startDate?: string;
                    endDate?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileResult"];
                        "application/json": components["schemas"]["FileResult"];
                        "text/json": components["schemas"]["FileResult"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Project/{id}/reactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivate by id */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Quotation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Quotation2"][];
                        "application/json": components["schemas"]["Quotation2"][];
                        "text/json": components["schemas"]["Quotation2"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a Quotation */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["QuotationCreateDTO"];
                    "text/json": components["schemas"]["QuotationCreateDTO"];
                    "application/*+json": components["schemas"]["QuotationCreateDTO"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Quotation2"];
                        "application/json": components["schemas"]["Quotation2"];
                        "text/json": components["schemas"]["Quotation2"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Quotation/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Quotation2"];
                        "application/json": components["schemas"]["Quotation2"];
                        "text/json": components["schemas"]["Quotation2"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Deactivate a Quotation by ID */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Patch a Quotation by ID */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["QuotationPatchDTO"];
                    "text/json": components["schemas"]["QuotationPatchDTO"];
                    "application/*+json": components["schemas"]["QuotationPatchDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Quotation/{id}/update-state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Quotation State */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["QuotationStatusPatchDTO"];
                    "text/json": components["schemas"]["QuotationStatusPatchDTO"];
                    "application/*+json": components["schemas"]["QuotationStatusPatchDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Quotation/{id}/gen-pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate Quotation PDF */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Quotation/{id}/gen-excel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Generate Quotation Excel */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Quotation/{id}/email-pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Quotation PDF via Email */
        post: {
            parameters: {
                query: {
                    email: string;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Quotation/{id}/whatsapp-pdf": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send Quotation PDF via WhatsApp */
        post: {
            parameters: {
                query: {
                    phoneNumber: string;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Quotation/{id}/reactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactive quotation by Id */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Quotation/approved/not-associated": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get approved and not associated project */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Quotation2"][];
                        "application/json": components["schemas"]["Quotation2"][];
                        "text/json": components["schemas"]["Quotation2"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Quotation/export/csv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export all quotations to CSV
         * @description Export quotations to CSV. Use startDate and endDate query parameters to filter by creation date. If startDate is not specified, exports from Unix epoch start (1970-01-01). If endDate is not specified, exports until current time.
         */
        get: {
            parameters: {
                query?: {
                    startDate?: string;
                    endDate?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileResult"];
                        "application/json": components["schemas"]["FileResult"];
                        "text/json": components["schemas"]["FileResult"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/RodentRegister": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Service": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Service"][];
                        "application/json": components["schemas"]["Service"][];
                        "text/json": components["schemas"]["Service"][];
                    };
                };
            };
        };
        put?: never;
        /** Create */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ServiceCreateDTO"];
                    "text/json": components["schemas"]["ServiceCreateDTO"];
                    "application/*+json": components["schemas"]["ServiceCreateDTO"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Service"];
                        "application/json": components["schemas"]["Service"];
                        "text/json": components["schemas"]["Service"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Service/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Service"];
                        "application/json": components["schemas"]["Service"];
                        "text/json": components["schemas"]["Service"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Deactivate by id */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Partial edit one by id */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ServicePatchDTO"];
                    "text/json": components["schemas"]["ServicePatchDTO"];
                    "application/*+json": components["schemas"]["ServicePatchDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Service/{id}/reactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivate by id */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Supplier": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Supplier"][];
                        "application/json": components["schemas"]["Supplier"][];
                        "text/json": components["schemas"]["Supplier"][];
                    };
                };
            };
        };
        put?: never;
        /** Create */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SupplierCreateDTO"];
                    "text/json": components["schemas"]["SupplierCreateDTO"];
                    "application/*+json": components["schemas"]["SupplierCreateDTO"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Supplier"];
                        "application/json": components["schemas"]["Supplier"];
                        "text/json": components["schemas"]["Supplier"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Supplier/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Supplier"];
                        "application/json": components["schemas"]["Supplier"];
                        "text/json": components["schemas"]["Supplier"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Partial edit one by id */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SupplierPatchDTO"];
                    "text/json": components["schemas"]["SupplierPatchDTO"];
                    "application/*+json": components["schemas"]["SupplierPatchDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Supplier/update/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Actualizar proveedor por ID */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["SupplierPatchDTO"];
                    "text/json": components["schemas"]["SupplierPatchDTO"];
                    "application/*+json": components["schemas"]["SupplierPatchDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/Supplier/{id}/reactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactive supplier by Id */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Supplier/export/csv": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export all suppliers to CSV with optional date range filtering
         * @description Export suppliers to CSV. Use startDate and endDate query parameters to filter by creation date. If startDate is not specified, exports from Unix epoch start (1970-01-01). If endDate is not specified, exports until current time.
         */
        get: {
            parameters: {
                query?: {
                    startDate?: string;
                    endDate?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileResult"];
                        "application/json": components["schemas"]["FileResult"];
                        "text/json": components["schemas"]["FileResult"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/TermsAndConditions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["TermsAndConditions"][];
                        "application/json": components["schemas"]["TermsAndConditions"][];
                        "text/json": components["schemas"]["TermsAndConditions"][];
                    };
                };
            };
        };
        put?: never;
        /** Create */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TermsAndConditionsCreateDTO"];
                    "text/json": components["schemas"]["TermsAndConditionsCreateDTO"];
                    "application/*+json": components["schemas"]["TermsAndConditionsCreateDTO"];
                };
            };
            responses: {
                /** @description Created */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["TermsAndConditions"];
                        "application/json": components["schemas"]["TermsAndConditions"];
                        "text/json": components["schemas"]["TermsAndConditions"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/TermsAndConditions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get one by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["TermsAndConditions"];
                        "application/json": components["schemas"]["TermsAndConditions"];
                        "text/json": components["schemas"]["TermsAndConditions"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** Deactivate by id */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Partial edit one by id */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TermsAndConditionsPatchDTO"];
                    "text/json": components["schemas"]["TermsAndConditionsPatchDTO"];
                    "application/*+json": components["schemas"]["TermsAndConditionsPatchDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/TermsAndConditions/{id}/reactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivate by id */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Appointment/{appointmentid}/TreatmentProduct": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Treatment Products of an Appointment */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["TreatmentProductDTO"][];
                        "application/json": components["schemas"]["TreatmentProductDTO"][];
                        "text/json": components["schemas"]["TreatmentProductDTO"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Edit Treatment Products of an Appointment */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TreatmentProductInDTO"][];
                    "text/json": components["schemas"]["TreatmentProductInDTO"][];
                    "application/*+json": components["schemas"]["TreatmentProductInDTO"][];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/User": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets info about the currently logged in user, based on the JWT token. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["UserReturn"];
                        "application/json": components["schemas"]["UserReturn"];
                        "text/json": components["schemas"]["UserReturn"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UserUpdateDTO"];
                    "text/json": components["schemas"]["UserUpdateDTO"];
                    "application/*+json": components["schemas"]["UserUpdateDTO"];
                };
            };
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/{appointmentid}/TreatmentArea": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Treatment Areas of an Appointment */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["TreatmentAreaGetDTO"][];
                        "application/json": components["schemas"]["TreatmentAreaGetDTO"][];
                        "text/json": components["schemas"]["TreatmentAreaGetDTO"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Edit Treatment Areas of an Appointment */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TreatmentAreaInDTO"][];
                    "text/json": components["schemas"]["TreatmentAreaInDTO"][];
                    "application/*+json": components["schemas"]["TreatmentAreaInDTO"][];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/Appointment/{appointmentid}/CompleteReport": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get CompleteReport of an Appointment */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["CompleteReportDTO"];
                        "application/json": components["schemas"]["CompleteReportDTO"];
                        "text/json": components["schemas"]["CompleteReportDTO"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update CompleteReport of an Appointment */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateCompleteReportDTO"];
                    "text/json": components["schemas"]["UpdateCompleteReportDTO"];
                    "application/*+json": components["schemas"]["UpdateCompleteReportDTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/Appointment/{appointmentid}/CompleteReport/docx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download Complete Report as DOCX */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileContentResult"];
                        "application/json": components["schemas"]["FileContentResult"];
                        "text/json": components["schemas"]["FileContentResult"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/{appointmentid}/Disinfection-Desinsect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Disinfection-Desinsect of an Appointment */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Report1DTO"];
                        "application/json": components["schemas"]["Report1DTO"];
                        "text/json": components["schemas"]["Report1DTO"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Disinfection-Desinsect of an Appointment */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateReport1DTO"];
                    "text/json": components["schemas"]["UpdateReport1DTO"];
                    "application/*+json": components["schemas"]["UpdateReport1DTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/Appointment/{appointmentid}/Disinfection-Desinsect/docx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download Disinfection-Desinsect as DOCX */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileContentResult"];
                        "application/json": components["schemas"]["FileContentResult"];
                        "text/json": components["schemas"]["FileContentResult"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/{appointmentid}/RodenticideReport": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Rodenticide Report of an Appointment */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Report2DTO"];
                        "application/json": components["schemas"]["Report2DTO"];
                        "text/json": components["schemas"]["Report2DTO"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Rodenticide Report of an Appointment */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateReport2DTO"];
                    "text/json": components["schemas"]["UpdateReport2DTO"];
                    "application/*+json": components["schemas"]["UpdateReport2DTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/Appointment/{appointmentid}/RodenticideReport/docx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download Rodenticide Report as DOCX */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileContentResult"];
                        "application/json": components["schemas"]["FileContentResult"];
                        "text/json": components["schemas"]["FileContentResult"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/{appointmentid}/Report3": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Report3 of an Appointment */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Report3DTO"];
                        "application/json": components["schemas"]["Report3DTO"];
                        "text/json": components["schemas"]["Report3DTO"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update Report3 of an Appointment */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateReport3DTO"];
                    "text/json": components["schemas"]["UpdateReport3DTO"];
                    "application/*+json": components["schemas"]["UpdateReport3DTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/Appointment/{appointmentid}/Report3/docx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download Report3 as DOCX */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileContentResult"];
                        "application/json": components["schemas"]["FileContentResult"];
                        "text/json": components["schemas"]["FileContentResult"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Appointment/{appointmentid}/RatExterminationSubst": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get RatExterminationSubst of an Appointment */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Report4DTO"];
                        "application/json": components["schemas"]["Report4DTO"];
                        "text/json": components["schemas"]["Report4DTO"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update RatExterminationSubst of an Appointment */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateReport4DTO"];
                    "text/json": components["schemas"]["UpdateReport4DTO"];
                    "application/*+json": components["schemas"]["UpdateReport4DTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        trace?: never;
    };
    "/api/Appointment/{appointmentid}/RatExterminationSubst/docx": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download RatExterminationSubst as DOCX */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    appointmentid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["FileContentResult"];
                        "application/json": components["schemas"]["FileContentResult"];
                        "text/json": components["schemas"]["FileContentResult"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Product": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all products & solvents */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProductGetAllOutputDTO"][];
                        "application/json": components["schemas"]["ProductGetAllOutputDTO"][];
                        "text/json": components["schemas"]["ProductGetAllOutputDTO"][];
                    };
                };
            };
        };
        put?: never;
        /** Create a product with Solvents */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ProductCreateInputDTO"];
                    "text/json": components["schemas"]["ProductCreateInputDTO"];
                    "application/*+json": components["schemas"]["ProductCreateInputDTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Product/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete a product */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** Update a product and its solvents */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ProductUpdateInputDTO"];
                    "text/json": components["schemas"]["ProductUpdateInputDTO"];
                    "application/*+json": components["schemas"]["ProductUpdateInputDTO"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SuccessResult"];
                        "application/json": components["schemas"]["SuccessResult"];
                        "text/json": components["schemas"]["SuccessResult"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["NotFoundResult"];
                        "application/json": components["schemas"]["NotFoundResult"];
                        "text/json": components["schemas"]["NotFoundResult"];
                    };
                };
                /** @description Conflict */
                409: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorResult"];
                        "application/json": components["schemas"]["ErrorResult"];
                        "text/json": components["schemas"]["ErrorResult"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ErrorResult"];
                        "application/json": components["schemas"]["ErrorResult"];
                        "text/json": components["schemas"]["ErrorResult"];
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/Product/{id}/reactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Reactivate a product */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AppointmentCancelDTO: {
            cancelled?: boolean;
        };
        AppointmentCertificatePatchDTO: {
            /** Format: date-time */
            expirationDate?: string | null;
        };
        AppointmentCreateDTO: {
            /** Format: date-time */
            dueDate?: string;
            serviceIds?: string[];
            /** Format: time */
            enterTime?: string | null;
            /** Format: time */
            leaveTime?: string | null;
            murinoMapKey?: string | null;
            murinoMapUrl?: string | null;
        };
        AppointmentCreateDTOThroughProject: {
            /** Format: date-time */
            dueDate: string;
            /** @description Array of Service IDs */
            services: string[];
        };
        AppointmentGetDTO: {
            project: components["schemas"]["Project"];
            /** Format: int32 */
            certificateNumber?: number | null;
            /** Format: date-time */
            dueDate: string;
            /** Format: date-time */
            actualDate?: string | null;
            client: components["schemas"]["Client"];
            /** Format: uuid */
            id: string;
            isActive: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            modifiedAt: string;
            /** Format: time */
            enterTime?: string | null;
            /** Format: time */
            leaveTime?: string | null;
            murinoMapKey?: string | null;
            murinoMapUrl?: string | null;
        };
        AppointmentGetDTO2: {
            /** Format: int32 */
            appointmentNumber?: number;
            /** Format: int32 */
            certificateNumber?: number | null;
            /** Format: date-time */
            dueDate?: string;
            /** Format: date-time */
            actualDate?: string;
            services?: components["schemas"]["Service"][];
            project?: components["schemas"]["Project"];
            client?: components["schemas"]["Client"];
            /** Format: time */
            enterTime?: string | null;
            /** Format: time */
            leaveTime?: string | null;
            murinoMapKey?: string | null;
            murinoMapUrl?: string | null;
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        AppointmentGetOutDTO: {
            /** Format: uuid */
            id: string;
            /** Format: int32 */
            appointmentNumber: number;
            /** Format: int32 */
            certificateNumber?: number | null;
            /** Format: time */
            enterTime?: string | null;
            /** Format: time */
            leaveTime?: string | null;
            /** Format: date-time */
            dueDate: string;
            /** Format: date-time */
            actualDate?: string | null;
            cancelled: boolean;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            modifiedAt?: string | null;
            isActive: boolean;
            operationSheet: components["schemas"]["ProjectOperationSheet"];
            /** Format: int32 */
            orderedNumber: number;
            project: components["schemas"]["ProjectBasicInfoDTO"];
            servicesIds: string[];
            treatmentAreas: components["schemas"]["TreatmentAreaDTO"][];
            treatmentProducts: components["schemas"]["TreatmentProductDTO"][];
        };
        AppointmentPatchDTO: {
            /** Format: int32 */
            orderNumber?: number | null;
            /** Format: date-time */
            dueDate?: string | null;
            /** Format: date-time */
            actualDate?: string | null;
            /** Format: time */
            enterTime?: string | null;
            /** Format: time */
            leaveTime?: string | null;
            murinoMapKey?: string | null;
            murinoMapUrl?: string | null;
        };
        Business: {
            digesaNumber: string;
            address: string;
            email: string;
            ruc: string;
            phones: string;
            directorName: string;
            bankName: string;
            bankAccount: string;
            bankCCI: string;
            deductions: string;
            thechnicalDirectorName: string;
            thechnicalDirectorPosition: string;
            thechnicalDirectorCIP: string;
            responsibleName: string;
            responsiblePosition: string;
            responsibleCIP: string;
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        BusinessCreateDTO: Record<string, never>;
        BusinessPatchDTO: {
            digesaNumber?: string | null;
            address?: string | null;
            email?: string | null;
            ruc?: string | null;
            phones?: string | null;
            directorName?: string | null;
            bankName?: string | null;
            bankAccount?: string | null;
            bankCCI?: string | null;
            deductions?: string | null;
            thechnicalDirectorName?: string | null;
            thechnicalDirectorPosition?: string | null;
            thechnicalDirectorCIP?: string | null;
            responsibleName?: string | null;
            responsiblePosition?: string | null;
            responsibleCIP?: string | null;
        };
        Certificate: {
            /** Format: uuid */
            projectAppointmentId: string;
            /** Format: date-time */
            expirationDate?: string | null;
            status: components["schemas"]["ResourceStatus"];
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        CertificateAvailable: {
            /** Format: uuid */
            appoinmentId: string;
            /** Format: uuid */
            certificateId: string;
            /** Format: date-time */
            dueDate: string;
            status: components["schemas"]["ResourceStatus"];
        };
        CertificateGet: {
            projectAppointment?: components["schemas"]["ProjectAppointment"];
            /** Format: uuid */
            projectAppointmentId?: string;
            /** Format: date-time */
            expirationDate?: string;
            project?: components["schemas"]["Project"];
            client?: components["schemas"]["Client"];
            services?: components["schemas"]["Service"][];
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        Client: {
            /** Format: int32 */
            clientNumber: number;
            typeDocument: string;
            typeDocumentValue: string;
            razonSocial?: string | null;
            businessType?: string | null;
            name: string;
            fiscalAddress: string;
            email: string;
            clientLocations: components["schemas"]["ClientLocation"][];
            phoneNumber: string;
            contactName?: string | null;
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        ClientCreateDTO: {
            typeDocument: string;
            typeDocumentValue: string;
            razonSocial?: string | null;
            businessType?: string | null;
            name: string;
            fiscalAddress: string;
            email: string;
            clientLocations?: components["schemas"]["ClientLocationDTO"][] | null;
            phoneNumber: string;
            contactName?: string | null;
        };
        ClientLocation: {
            address: string;
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        ClientLocationDTO: {
            /** Format: uuid */
            id?: string | null;
            address: string;
        };
        ClientPatchDTO: {
            razonSocial?: string | null;
            businessType?: string | null;
            name?: string | null;
            fiscalAddress?: string | null;
            email?: string | null;
            phoneNumber?: string | null;
            contactName?: string | null;
            clientLocations?: components["schemas"]["ClientLocationDTO"][] | null;
        };
        CompleteReport: {
            /** Format: date-time */
            signingDate?: string | null;
            content?: components["schemas"]["ContentSection"][];
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        CompleteReportDTO: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            signingDate?: string | null;
            content: components["schemas"]["ContentSection"][];
        };
        ContentSection: components["schemas"]["ContentSectionTextBlock"] | components["schemas"]["ContentSectionTextArea"];
        ContentSectionTextArea: {
            /** @enum {string} */
            $type?: "textArea";
            content: string;
        };
        ContentSectionTextBlock: {
            /** @enum {string} */
            $type?: "textBlock";
            title: string;
            numbering: string;
            /** Format: int32 */
            level: number;
            sections: unknown[];
        };
        EntityTagHeaderValue: {
            tag?: components["schemas"]["StringSegment"];
            isWeak?: boolean;
        } | null;
        Error: {
            code?: string | null;
            details?: string | null;
        };
        ErrorResult: {
            message?: string | null;
            errors?: components["schemas"]["Error"][] | null;
            success?: boolean;
            failure?: boolean;
        };
        FileContentResult: {
            /** Format: byte */
            fileContents?: string;
            contentType?: string | null;
            fileDownloadName?: string | null;
            /** Format: date-time */
            lastModified?: string | null;
            entityTag?: components["schemas"]["EntityTagHeaderValue"];
            enableRangeProcessing?: boolean;
        };
        FileResult: {
            contentType?: string | null;
            fileDownloadName?: string | null;
            /** Format: date-time */
            lastModified?: string | null;
            entityTag?: components["schemas"]["EntityTagHeaderValue"];
            enableRangeProcessing?: boolean;
        };
        GetCertificateForCreationOutDto: {
            /** Format: uuid */
            serviceId: string;
            clientName: string;
            /** Format: int32 */
            serviceNumber: number;
            availableCerts: components["schemas"]["CertificateAvailable"][];
        };
        GetCertificateForTableOutDto: {
            /** Format: uuid */
            projectId: string;
            /** Format: uuid */
            certificateId: string;
            /** Format: uuid */
            appointmentId: string;
            /** Format: int32 */
            number: number;
            clientName: string;
            /** Format: date-time */
            actualDate?: string | null;
            status: components["schemas"]["ResourceStatus"];
        };
        GetOperationSheetsForCreationOutDto: {
            /** Format: uuid */
            serviceId: string;
            clientName: string;
            /** Format: int32 */
            serviceNumber: number;
            availableSheets: components["schemas"]["OperationSheetAvailable"][];
        };
        GetOperationSheetsForTableOutDto: {
            /** Format: uuid */
            projectId: string;
            /** Format: uuid */
            operationSheetId: string;
            /** Format: uuid */
            appointmentId: string;
            /** Format: int32 */
            number: number;
            clientName: string;
            /** Format: date-time */
            actualDate?: string | null;
            enterLeaveTime: string;
            status: components["schemas"]["ResourceStatus"];
        };
        LoginRequest: {
            /** @default admin@admin.com */
            email: string;
            /** @default Acide2025/1 */
            password: string;
        };
        LoginResponse: {
            accessToken: string;
            refreshToken: string;
            /** Format: int32 */
            accessExpiresIn: number;
            /** Format: int32 */
            refreshExpiresIn: number;
        };
        NotFoundResult: {
            message?: string | null;
            errors?: components["schemas"]["Error"][] | null;
            success?: boolean;
            failure?: boolean;
        };
        /** @enum {unknown|null} */
        NullableOfInfestationDegree: "High" | "Moderate" | "Low" | "Negligible" | null;
        /** @enum {unknown|null} */
        NullableOfQuotationFrequency: "Fortnightly" | "Monthly" | "Bimonthly" | "Quarterly" | "Semiannual" | null;
        OperationSheetAvailable: {
            /** Format: uuid */
            appoinmentId: string;
            /** Format: uuid */
            operationSheetId: string;
            /** Format: date-time */
            dueDate: string;
            status: components["schemas"]["ResourceStatus"];
        };
        OperationSheetCreateDTO: {
            /** Format: uuid */
            projectAppointmentId?: string;
            /** Format: date-time */
            operationDate?: string | null;
            treatedAreas?: string | null;
            insects?: string | null;
            rodents?: string;
            otherPlagues?: string | null;
            insecticide?: string | null;
            insecticide2?: string | null;
            rodenticide?: string | null;
            desinfectant?: string | null;
            otherProducts?: string | null;
            insecticideAmount?: string | null;
            insecticideAmount2?: string | null;
            rodenticideAmount?: string | null;
            desinfectantAmount?: string | null;
            otherProductsAmount?: string | null;
            staff1?: string | null;
            staff2?: string | null;
            staff3?: string | null;
            staff4?: string | null;
            aspersionManual?: boolean | null;
            aspercionMotor?: boolean | null;
            nebulizacionFrio?: boolean | null;
            nebulizacionCaliente?: boolean | null;
            colocacionCebosCebaderos?: string | null;
            numeroCeboTotal?: string | null;
            numeroCeboRepuestos?: string | null;
            nroPlanchasPegantes?: string | null;
            nroJaulasTomahawk?: string | null;
            degreeInsectInfectivity?: components["schemas"]["NullableOfInfestationDegree"];
            degreeRodentInfectivity?: components["schemas"]["NullableOfInfestationDegree"];
            observations?: string | null;
            recommendations?: string | null;
        };
        OperationSheetPatchDTO: {
            /** Format: uuid */
            projectAppointmentId?: string;
            /** Format: date-time */
            operationDate?: string | null;
            treatedAreas?: string | null;
            /** Format: time */
            enterTime?: string | null;
            /** Format: time */
            leaveTime?: string | null;
            insects?: string | null;
            rodents?: string | null;
            otherPlagues?: string | null;
            rodentConsumptionPartial?: string | null;
            rodentConsumptionTotal?: string | null;
            rodentConsumptionDeteriorated?: string | null;
            rodentConsumptionNone?: string | null;
            insecticide?: string | null;
            insecticide2?: string | null;
            rodenticide?: string | null;
            desinfectant?: string | null;
            otherProducts?: string | null;
            insecticideAmount?: string | null;
            insecticideAmount2?: string | null;
            rodenticideAmount?: string | null;
            desinfectantAmount?: string | null;
            otherProductsAmount?: string | null;
            staff1?: string | null;
            staff2?: string | null;
            staff3?: string | null;
            staff4?: string | null;
            aspersionManual?: boolean | null;
            aspercionMotor?: boolean | null;
            nebulizacionFrio?: boolean | null;
            nebulizacionCaliente?: boolean | null;
            colocacionCebosCebaderos?: string | null;
            numeroCeboTotal?: string | null;
            numeroCeboRepuestos?: string | null;
            nroPlanchasPegantes?: string | null;
            nroJaulasTomahawk?: string | null;
            degreeInsectInfectivity?: components["schemas"]["NullableOfInfestationDegree"];
            degreeRodentInfectivity?: components["schemas"]["NullableOfInfestationDegree"];
            observations?: string | null;
            recommendations?: string | null;
        };
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        };
        ProductAmountSolventOutputDTO: {
            /** Format: uuid */
            id: string;
            amountAndSolvent: string;
        };
        ProductAmountSolventUpdateDTO: {
            /** Format: uuid */
            id?: string | null;
            amountAndSolvent: string;
        };
        ProductCreateInputDTO: {
            name: string;
            activeIngredient: string;
            solvents: string[];
        };
        ProductDTO: {
            /** Format: uuid */
            id: string;
            name: string;
            activeIngredient: string;
        };
        ProductGetAllOutputDTO: {
            /** Format: uuid */
            id: string;
            name: string;
            activeIngredient: string;
            isActive: boolean;
            productAmountSolvents: components["schemas"]["ProductAmountSolventOutputDTO"][];
        };
        ProductUpdateInputDTO: {
            name?: string | null;
            activeIngredient?: string | null;
            solvents?: components["schemas"]["ProductAmountSolventUpdateDTO"][] | null;
        };
        Project: {
            /** Format: int32 */
            projectNumber?: number;
            address: string;
            /** Format: uint32 */
            area: number;
            status: components["schemas"]["ProjectStatus"];
            /** Format: uint32 */
            spacesCount: number;
            ambients?: string[];
            /** Format: double */
            price: number;
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        ProjectAppointment: {
            /** Format: int32 */
            appointmentNumber: number;
            /** Format: int32 */
            certificateNumber?: number | null;
            /** Format: time */
            enterTime?: string | null;
            /** Format: time */
            leaveTime?: string | null;
            /** Format: date-time */
            dueDate: string;
            /** Format: date-time */
            actualDate?: string | null;
            cancelled?: boolean;
            companyRepresentative?: string | null;
            murinoMapKey?: string | null;
            murinoMapUrl?: string | null;
            completeReport?: components["schemas"]["CompleteReport"];
            report1?: components["schemas"]["Report1"];
            report2?: components["schemas"]["Report2"];
            report3?: components["schemas"]["Report3"];
            report4?: components["schemas"]["Report4"];
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        ProjectAppointmentDTO: {
            /** Format: int32 */
            certificateNumber?: number | null;
            /** Format: date-time */
            dueDate: string;
            /** Format: date-time */
            actualDate?: string | null;
            /** Format: int32 */
            appointmentNumber?: number | null;
            cancelled?: boolean | null;
            /** Format: time */
            enterTime?: string | null;
            /** Format: time */
            leaveTime?: string | null;
            servicesIds: string[];
            projectOperationSheet: components["schemas"]["ProjectOperationSheet"];
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        ProjectBasicInfoDTO: {
            /** Format: uuid */
            id: string;
            /** Format: int32 */
            projectNumber: number;
            address: string;
            services: components["schemas"]["Service"][];
            status?: components["schemas"]["ProjectStatus"];
        };
        ProjectCreateDTO: {
            /** Format: uuid */
            clientId: string;
            /** Format: uuid */
            quotationId?: string | null;
            /** @description Array of Service IDs */
            services: string[];
            address: string;
            /** Format: uint32 */
            area: number;
            /** Format: uint32 */
            spacesCount: number;
            companyRepresentative?: string | null;
            /** Format: double */
            price: number;
            appointmentCreateDTOs: components["schemas"]["AppointmentCreateDTOThroughProject"][];
            ambients?: string[];
        };
        ProjectOperationSheet: {
            /** Format: uuid */
            projectAppointmentId: string;
            /** Format: date-time */
            operationDate: string;
            treatedAreas: string;
            insects: string;
            rodents: string;
            rodentConsumptionPartial?: string;
            rodentConsumptionTotal?: string;
            rodentConsumptionDeteriorated?: string;
            rodentConsumptionNone?: string;
            otherPlagues: string;
            aspersionManual: boolean;
            aspercionMotor: boolean;
            nebulizacionFrio: boolean;
            nebulizacionCaliente: boolean;
            colocacionCebosCebaderos: string;
            numeroCeboTotal: string;
            numeroCeboRepuestos: string;
            nroPlanchasPegantes: string;
            nroJaulasTomahawk: string;
            insecticide: string;
            insecticide2: string;
            insecticideAmount: string;
            insecticideAmount2: string;
            rodenticide: string;
            rodenticideAmount: string;
            desinfectant: string;
            desinfectantAmount: string;
            otherProducts: string;
            otherProductsAmount: string;
            degreeInsectInfectivity?: components["schemas"]["NullableOfInfestationDegree"];
            degreeRodentInfectivity?: components["schemas"]["NullableOfInfestationDegree"];
            staff1: string;
            staff2: string;
            staff3: string;
            staff4: string;
            observations: string;
            recommendations: string;
            status: components["schemas"]["ResourceStatus"];
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        ProjectPatchDTO: {
            /** Format: uuid */
            clientId?: string | null;
            /** Format: uuid */
            quotationId?: string | null;
            /** @description Array of Service IDs */
            services?: string[] | null;
            address?: string | null;
            /** Format: uint32 */
            area?: number | null;
            /** Format: uint32 */
            spacesCount?: number | null;
            /** Format: double */
            price?: number | null;
            ambients?: string[] | null;
        };
        /** @enum {unknown} */
        ProjectStatus: "Pending" | "Completed" | "Rejected";
        ProjectSummary: {
            client: components["schemas"]["Client"];
            services: components["schemas"]["Service"][];
            quotation?: components["schemas"]["Quotation"];
            /** Format: int32 */
            projectNumber: number;
            address: string;
            /** Format: uint32 */
            area: number;
            status: components["schemas"]["ProjectStatus"];
            /** Format: uint32 */
            spacesCount: number;
            /** Format: double */
            price: number;
            ambients: string[];
            appointments: string[];
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        ProjectSummarySingle: {
            client: components["schemas"]["Client"];
            services: components["schemas"]["Service"][];
            quotation?: components["schemas"]["Quotation"];
            /** Format: int32 */
            projectNumber: number;
            address: string;
            /** Format: uint32 */
            area: number;
            status: components["schemas"]["ProjectStatus"];
            /** Format: uint32 */
            spacesCount: number;
            /** Format: double */
            price: number;
            ambients: string[];
            appointments: components["schemas"]["ProjectAppointmentDTO"][];
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        ProjectSummarySingle2: {
            client: components["schemas"]["Client"];
            services: components["schemas"]["Service"][];
            quotation?: components["schemas"]["Quotation"];
            /** Format: int32 */
            projectNumber: number;
            address: string;
            /** Format: uint32 */
            area: number;
            status: components["schemas"]["ProjectStatus"];
            /** Format: uint32 */
            spacesCount: number;
            /** Format: double */
            price: number;
            appointments: string[];
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        Quotation: {
            /** Format: int32 */
            quotationNumber: number;
            client: components["schemas"]["Client"];
            services?: unknown[];
            status: components["schemas"]["QuotationStatus"];
            frequency: components["schemas"]["QuotationFrequency"];
            hasTaxes: boolean;
            /** Format: date-time */
            creationDate: string;
            /** Format: date-time */
            expirationDate: string;
            serviceAddress: string;
            paymentMethod: string;
            others: string;
            availability: string;
            footerContact?: string;
            quotationServices: components["schemas"]["QuotationService"][];
            /** @description Name and description of the Desinsectant to use */
            desinsectant?: string | null;
            /** @description Name and description of the Rodenticide to use */
            derodent?: string | null;
            /** @description Name and description of the Disinfectant to use */
            disinfectant?: string | null;
            termsAndConditions?: string[];
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        } | null;
        Quotation2: {
            /** Format: int32 */
            quotationNumber: number;
            client: components["schemas"]["Client"];
            services?: components["schemas"]["Service"][];
            status: components["schemas"]["QuotationStatus"];
            frequency: components["schemas"]["QuotationFrequency"];
            hasTaxes: boolean;
            /** Format: date-time */
            creationDate: string;
            /** Format: date-time */
            expirationDate: string;
            serviceAddress: string;
            paymentMethod: string;
            others: string;
            availability: string;
            footerContact?: string;
            quotationServices: components["schemas"]["QuotationService"][];
            /** @description Name and description of the Desinsectant to use */
            desinsectant?: string | null;
            /** @description Name and description of the Rodenticide to use */
            derodent?: string | null;
            /** @description Name and description of the Disinfectant to use */
            disinfectant?: string | null;
            termsAndConditions?: string[];
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        QuotationCreateDTO: {
            /** Format: uuid */
            clientId: string;
            serviceIds: string[];
            frequency: components["schemas"]["QuotationFrequency"];
            hasTaxes: boolean;
            /** Format: date-time */
            creationDate: string;
            /** Format: date-time */
            expirationDate: string;
            serviceAddress: string;
            paymentMethod: string;
            others: string;
            availability: string;
            footerContact?: string | null;
            quotationServices: components["schemas"]["QuotationServiceCreateDTO"][];
            /** @description Name and description of the Desinsectant to use */
            desinsectant?: string | null;
            /** @description Name and description of the Rodenticide to use */
            derodent?: string | null;
            /** @description Name and description of the Disinfectant to use */
            disinfectant?: string | null;
            termsAndConditions?: string[];
        };
        QuotationData: {
            /** Format: int32 */
            accepted: number;
            /** Format: int32 */
            rejected: number;
        };
        /** @enum {unknown} */
        QuotationFrequency: "Fortnightly" | "Monthly" | "Bimonthly" | "Quarterly" | "Semiannual";
        QuotationPatchDTO: {
            /** Format: uuid */
            clientId?: string | null;
            serviceIds?: string[] | null;
            frequency?: components["schemas"]["NullableOfQuotationFrequency"];
            hasTaxes?: boolean | null;
            /** Format: date-time */
            creationDate?: string | null;
            /** Format: date-time */
            expirationDate?: string | null;
            serviceAddress?: string | null;
            paymentMethod?: string | null;
            others?: string | null;
            availability?: string | null;
            footerContact?: string | null;
            quotationServices?: components["schemas"]["QuotationServicePatchDTO"][] | null;
            termsAndConditions?: string[] | null;
            desinsectant?: string | null;
            derodent?: string | null;
            disinfectant?: string | null;
        };
        QuotationService: {
            /** @description Amount of items */
            amount: string;
            /** @description Name and description of the service */
            nameDescription: string;
            /**
             * Format: double
             * @description Price of this service
             */
            price?: number | null;
            /** @description Accesories to use for this service */
            accesories?: string | null;
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        QuotationServiceCreateDTO: {
            /** @description Amount of items */
            amount: string;
            /** @description Name and description of the service */
            nameDescription: string;
            /**
             * Format: double
             * @description Price of this service
             */
            price?: number | null;
            /** @description Accesories to use for this service */
            accesories?: string | null;
        };
        QuotationServicePatchDTO: {
            /** Format: uuid */
            id: string | null;
            /** @description Amount of items */
            amount: string;
            /** @description Name and description of the service */
            nameDescription: string;
            /**
             * Format: double
             * @description Price of this service
             */
            price?: number | null;
            /** @description Accesories to use for this service */
            accesories?: string | null;
        };
        /** @enum {unknown} */
        QuotationStatus: "Pending" | "Approved" | "Rejected";
        QuotationStatusPatchDTO: {
            status: components["schemas"]["QuotationStatus"];
        };
        RefreshRequest: {
            refreshToken: string;
        };
        Report1: {
            /** Format: date-time */
            signingDate?: string | null;
            content?: unknown[];
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        Report1DTO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            signingDate?: string | null;
            content?: components["schemas"]["ContentSection"][];
        };
        Report2: {
            /** Format: date-time */
            signingDate?: string | null;
            content?: unknown[];
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        Report2DTO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            signingDate?: string | null;
            content?: components["schemas"]["ContentSection"][];
        };
        Report3: {
            /** Format: date-time */
            signingDate?: string | null;
            content?: unknown[];
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        Report3DTO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            signingDate?: string | null;
            content?: components["schemas"]["ContentSection"][];
        };
        Report4: {
            /** Format: date-time */
            signingDate?: string | null;
            content?: unknown[];
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        Report4DTO: {
            /** Format: uuid */
            id?: string;
            /** Format: date-time */
            signingDate?: string | null;
            content?: components["schemas"]["ContentSection"][];
        };
        /** @enum {unknown} */
        ResourceStatus: "Created" | "Started" | "Completed";
        RodentArea: {
            name: string;
            /** Format: int32 */
            cebaderoTrampa: number;
            frequency: components["schemas"]["QuotationFrequency"];
            rodentConsumption: components["schemas"]["RodentConsumption"];
            rodentResult: components["schemas"]["RodentResult"];
            rodentMaterials: components["schemas"]["RodentMaterials"];
            productName: string;
            productDose: string;
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        RodentAreaUpdateDTO: {
            /** Format: uuid */
            id?: string | null;
            name?: string;
            /** Format: int32 */
            cebaderoTrampa?: number;
            frequency?: components["schemas"]["QuotationFrequency"];
            rodentConsumption?: components["schemas"]["RodentConsumption"];
            rodentResult?: components["schemas"]["RodentResult"];
            rodentMaterials?: components["schemas"]["RodentMaterials"];
            productName?: string;
            productDose?: string;
        };
        /** @enum {unknown} */
        RodentConsumption: "Partial" | "Total" | "Deteriorated" | "NoConsumption";
        /** @enum {unknown} */
        RodentMaterials: "Fungicide" | "RodenticideOrBait" | "StickyTrap" | "Tomahawk";
        RodentRegister: {
            /** Format: uuid */
            projectAppointmentId?: string;
            /** Format: date-time */
            serviceDate: string;
            rodentAreas?: components["schemas"]["RodentArea"][];
            incidents?: string | null;
            correctiveMeasures?: string | null;
            status: components["schemas"]["ResourceStatus"];
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        RodentRegisterUpdateDTO: {
            /** Format: date-time */
            serviceDate?: string | null;
            incidents?: string | null;
            correctiveMeasures?: string | null;
            rodentAreas?: components["schemas"]["RodentAreaUpdateDTO"][];
            companyRepresentative?: string | null;
        };
        /** @enum {unknown} */
        RodentResult: "Active" | "Inactive" | "RoedMto" | "Others";
        Service: {
            name: string;
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        ServiceCreateDTO: {
            name: string;
        };
        ServicePatchDTO: {
            name?: string | null;
        };
        StatsGet: {
            monthlyServiceCount: {
                [key: string]: number;
            };
            serviceCount: {
                [key: string]: number;
            };
            monthlyProfit: {
                [key: string]: number;
            };
            monthlyQuotations: {
                [key: string]: components["schemas"]["QuotationData"];
            };
        };
        StringSegment: {
            buffer?: string | null;
            /** Format: int32 */
            offset?: number;
            /** Format: int32 */
            length?: number;
            value?: string | null;
            hasValue?: boolean;
        };
        SuccessResult: {
            success?: boolean;
            failure?: boolean;
        };
        SunatQueryResponse: {
            razonSocial?: string | null;
            name?: string | null;
            fiscalAddress?: string | null;
            businessType?: string | null;
            contactName?: string | null;
        };
        Supplier: {
            /** Format: int32 */
            supplierNumber: number;
            rucNumber: string;
            businessName?: string | null;
            businessType?: string | null;
            name: string;
            fiscalAddress: string;
            email: string;
            supplierLocations: components["schemas"]["SupplierLocation"][];
            phoneNumber: string;
            contactName?: string | null;
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        SupplierCreateDTO: {
            rucNumber: string;
            businessName?: string | null;
            businessType?: string | null;
            name: string;
            fiscalAddress: string;
            email: string;
            supplierLocations?: components["schemas"]["SupplierLocationDTO"][] | null;
            phoneNumber: string;
            contactName?: string | null;
        };
        SupplierLocation: {
            address: string;
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        SupplierLocationDTO: {
            /** Format: uuid */
            id?: string | null;
            address: string;
        };
        SupplierPatchDTO: {
            businessName?: string | null;
            businessType?: string | null;
            name?: string | null;
            fiscalAddress?: string | null;
            email?: string | null;
            phoneNumber?: string | null;
            contactName?: string | null;
            supplierLocations?: components["schemas"]["SupplierLocationDTO"][] | null;
        };
        TermsAndConditions: {
            name: string;
            content: string;
            /** Format: uuid */
            id?: string;
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            modifiedAt?: string;
        };
        TermsAndConditionsCreateDTO: {
            name: string;
            content: string;
        };
        TermsAndConditionsPatchDTO: {
            name?: string | null;
            content?: string | null;
        };
        TreatmentAreaDTO: {
            /** Format: uuid */
            id: string;
            areaName: string;
            observedVector?: string | null;
            infestationLevel?: string | null;
            performedService?: string | null;
            appliedTechnique?: string | null;
        };
        TreatmentAreaGetDTO: {
            /** Format: uuid */
            id: string;
            areaName: string;
            observedVector?: string | null;
            infestationLevel?: string | null;
            performedService?: string | null;
            appliedTechnique?: string | null;
            productsList: string[];
        };
        TreatmentAreaInDTO: {
            /** Format: uuid */
            id?: string;
            observedVector?: string | null;
            infestationLevel?: string | null;
            performedService?: string | null;
            appliedTechnique?: string | null;
            treatmentProductIds: string[];
        };
        TreatmentProductDTO: {
            /** Format: uuid */
            id: string;
            product: components["schemas"]["ProductDTO"];
            /** Format: uuid */
            productAmountSolventId: string;
            productAmountSolvent: string;
            equipmentUsed?: string | null;
            appliedTechnique?: string | null;
            appliedService?: string | null;
        };
        TreatmentProductInDTO: {
            /** Format: uuid */
            id?: string | null;
            /** Format: uuid */
            productId: string;
            /** Format: uuid */
            productAmountSolventId: string;
            equipmentUsed?: string | null;
            appliedTechnique?: string | null;
            appliedService?: string | null;
        };
        UpdateAppointmentTimesDto: {
            /** Format: time */
            enterTime?: string | null;
            /** Format: time */
            leaveTime?: string | null;
        };
        UpdateCompleteReportDTO: {
            /** Format: date-time */
            signingDate?: string | null;
            content?: components["schemas"]["ContentSection"][] | null;
        };
        UpdateReport1DTO: {
            /** Format: date-time */
            signingDate?: string | null;
            content?: components["schemas"]["ContentSection"][] | null;
        };
        UpdateReport2DTO: {
            /** Format: date-time */
            signingDate?: string | null;
            content?: components["schemas"]["ContentSection"][] | null;
        };
        UpdateReport3DTO: {
            /** Format: date-time */
            signingDate?: string | null;
            content?: components["schemas"]["ContentSection"][] | null;
        };
        UpdateReport4DTO: {
            /** Format: date-time */
            signingDate?: string | null;
            content?: components["schemas"]["ContentSection"][] | null;
        };
        UserReturn: {
            name: string;
            username: string;
            email: string;
        };
        UserUpdateDTO: {
            name: string;
            email: string;
            password?: string | null;
        };
        ValidationProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
            errors?: {
                [key: string]: string[];
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
